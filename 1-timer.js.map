{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst date = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconst timer = document.querySelectorAll(\".value\");\nstartBtn.disabled = true;\nlet userSelectedDate;\nlet isTimerActive = false;\n\nflatpickr(date, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0].getTime() < Date.now()) {\n       iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n      });\n    }\n\n    else {\n      userSelectedDate = selectedDates[0].getTime();\n\n      if (!isTimerActive) {\n        startBtn.disabled = false;\n        startBtn.classList.add(\"active\")\n      };\n      \n    }\n  },\n});\n\nfunction start() {\n  startBtn.disabled = true;\n  startBtn.classList.remove(\"active\");\n  date.disabled = true;\n  isTimerActive = true;\n  \n  const intervalId = setInterval(() => { \n    const currentTime = Date.now();\n    const deltaTime = userSelectedDate - currentTime;\n    if (deltaTime <= 0) {\n      clearInterval(intervalId);\n      return;\n    }\n    \n    const time = convertMs(deltaTime);\n    onTick(time);\n    \n  }, 1000)\n}\n\nfunction onTick({ days, hours, minutes, seconds }) {\n  const [daysElem, hoursElem, minutesElem, secondsElem] = timer;\n  daysElem.textContent = days;\n  hoursElem.textContent = hours;\n  minutesElem.textContent = minutes;\n  secondsElem.textContent = seconds;\n}\n\nstartBtn.addEventListener(\"click\", start);\n\n\nfunction convertMs(ms) {\n  \n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  \n  const days = addLeadingZero(Math.floor(ms / day));\n  \n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  \n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  \n  const seconds = addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}"],"names":["date","startBtn","timer","userSelectedDate","isTimerActive","flatpickr","selectedDates","iziToast","start","intervalId","currentTime","deltaTime","time","convertMs","onTick","days","hours","minutes","seconds","daysElem","hoursElem","minutesElem","secondsElem","ms","addLeadingZero","value"],"mappings":"+IAOA,MAAMA,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,iBAAiB,QAAQ,EAChDD,EAAS,SAAW,GACpB,IAAIE,EACAC,EAAgB,GAEpBC,EAAUL,EAAM,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQM,EAAe,CACjBA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,MACnCC,EAAS,MAAM,CACd,MAAO,QACP,QAAS,oCACjB,CAAO,GAIDJ,EAAmBG,EAAc,CAAC,EAAE,QAAO,EAEtCF,IACHH,EAAS,SAAW,GACpBA,EAAS,UAAU,IAAI,QAAQ,GAIpC,CACH,CAAC,EAED,SAASO,GAAQ,CACfP,EAAS,SAAW,GACpBA,EAAS,UAAU,OAAO,QAAQ,EAClCD,EAAK,SAAW,GAChBI,EAAgB,GAEhB,MAAMK,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAYR,EAAmBO,EACrC,GAAIC,GAAa,EAAG,CAClB,cAAcF,CAAU,EACxB,MACD,CAED,MAAMG,EAAOC,EAAUF,CAAS,EAChCG,EAAOF,CAAI,CAEZ,EAAE,GAAI,CACT,CAEA,SAASE,EAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACjD,KAAM,CAACC,EAAUC,EAAWC,EAAaC,CAAW,EAAIpB,EACxDiB,EAAS,YAAcJ,EACvBK,EAAU,YAAcJ,EACxBK,EAAY,YAAcJ,EAC1BK,EAAY,YAAcJ,CAC5B,CAEAjB,EAAS,iBAAiB,QAASO,CAAK,EAGxC,SAASK,EAAUU,EAAI,CAQrB,MAAMR,EAAOS,EAAe,KAAK,MAAMD,EAAK,KAAG,CAAC,EAE1CP,EAAQQ,EAAe,KAAK,MAAOD,EAAK,MAAO,IAAI,CAAC,EAEpDN,EAAUO,EAAe,KAAK,MAAQD,EAAK,MAAO,KAAQ,GAAM,CAAC,EAEjEL,EAAUM,EAAe,KAAK,MAASD,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAElF,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASM,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}